# 函数,能够实现一个具体的功能,是多行代码的组合
# 函数的定义:使用关键字 def
# def 函数名():        # 函数名要遵循标识符的规则,见名知意
#     函数代码(函数体)
# 函数定义,函数中的代码不会执行,在函数调用的时候,才会执行
# 函数的好处:重复的代码不需要多次书写,减少代码冗余


# 函数的定义   函数的定义不会执行函数中的代码
def func():
    print('好好学习,天天向上')
    print('good good study,day day up')
    print('上课认真听讲,不要走神')


# 定义函数后 需要两行空行

# 函数调用的时候才会执行函数中的代码    调用: 函数名()
func()


# 函数的文档说明本质是注释,告诉别人,这个函数怎么使用的,干什么事的
# 只不过这个注释有特定的位置书写要求,要写在函数名的下方
def function():
    """
    打印输出一个hello Python
    """
    # aaa
    print('hello python')


function()

# 查看函数的文档注释可以使用help(函数名)
help(function)


# 定义一个函数,实现两个数的求和
def add(a, b):  # a 和 b 称为形式参数,简称形参,
    c = a + b
    print(c)


# 函数调用,如果函数定义的时候有形参,那么在函数调用的时候,必须传递参数值
# 这个参数值称为 实际参数,简称实参
# 在函数调用的时候,会将实参的值传递给形参,    形参 的个数需要和  实参  的个数   相同
add(1, 3)
add(3, 52)


#局部变量,就是在函数内部定义的变量,就是局部变量
# 局部变量,只能在函数内部使用,不能在函数外部和其他函数中使用


def fun():
    num = 100
    print(num)


def fun1():
    num = 200   # 这个num 和 fun() 中的num是没有关系的
    print(num)
# 探究:局部变量能否在函数外部使用
# print(num) 代码报错 , 局部变量不能在外部使用


# 函数调用
# 局部变量生存周期:在函数调用的时候创建,函数调用结束之后,被销毁(删除)
# 局部变量只能在当前函数的内部使用,不能在函数的外部使用
fun()
fun1()

print('-*-'*10)
# 全局变量: 就是在函数外部定义的变量

# 定义一个全局变量
g_num = 100
# 探究: 1 能否在函数的内部访问全局变量? ===> 可以直接访问全局变量的值
#      2 能否在函数内部修改全局变量的值? ===> 不能直接修改全局变量的值


def fun2():
    print(g_num)


def fun3():
    # g_num = 320  # 这里不是修改全局变量的值,是定义一个局部变量 和全局变量的名字一样而已
    # 想要在函数内部修改全局变量的值,需要使用 global 这个关键字 声明这个变量为全局变量
    global g_num
    g_num = 302


fun3()
fun2()













