def func(a, b, c):
    print(f"a: {a}")
    print(f"b: {b}")
    print(f"c: {c}")


# 1 位置传参,按照形参的位置顺序将实参的值传给形参
func(1, 2, 3)


# 2 关键字传参,指定实参传给那个形参,注意点,关键字是形参的函数名,顺序可以改
func(a=10, b=20, c=30)
# 3 混合使用,  先写位置传参在写关键字传参
func(10, b=20, c=30)


print('-'*20)

# 缺省参数 形参,在函数定义的时候给形参一个默认值,这个形参就是缺省参数 ,
# 注意: 缺省参数要写在普通参数的后面
# 特点: 调用函数时 ,如果给缺省参数传递实参值 使用的就是传递的实参值,如果没有给缺省参数传递实参值, 则取默认值


def fun(name, age=35):
    print(f'name: {name}')
    print(f'age: {age}')


fun(10)    # 没有给age 传递实参值
fun(10, 30)    # 给age传递实参值30

print('-'*20)

# 不定长参数
# 在形参前边加上一个*,该形参就变成不定长元祖参数,可以接受所有的位置实参,类型 元祖
# 在形参前边加上两个*,该形参变成不定长字典参数,可以接受所有的关键字实参,类型 字典

# 普通形参 缺省形参 不定长元祖形参 不定长字典形参


def func1(a, b=1):  # 先普通 再缺省
    pass


# def fun(a, b=1, *args)  语法上不会报错,但是缺省参数不能使用默认值


def func2(a, *args, b=1):    # 普通形参 不定元祖形参 缺省形参
    print('a', a)
    print('b', b)
    print(args)


# func2(1, 2, 3, 4, 5)
func2(1, 5, 3, 4, 5, b=8)


def func3(a, *args, b=1, **kwargs):     # 普通形参 不定元祖形参 缺省形参  必定长字典形参
    pass


# print函数中的sep
print(1)
print(1, 2)
print(1, 2, 3)
print(1, 2, 3, 4,)
print(1, 2, 3, 4, 5)


print(1)
print(1, 2, sep='*')
print(1, 2, 3, sep='-*-')
print(1, 2, 3, 4, sep='python')
print(1, 2, 3, 4, 5, sep=' ')








